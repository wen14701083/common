import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'maven-publish'

android {
    compileSdkVersion 31

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 31
        versionCode 1
        versionName '0.0.12'

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
        buildConfigField('String', 'BUILD_TIME', getBuildTime())
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        abortOnError false
    }
}

private static String getBuildTime() {
    DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")
    LocalDateTime now = LocalDateTime.now()
    String dateTime = dtf.format(now)
    return "\"${dateTime}\""
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation 'androidx.appcompat:appcompat:1.3.0'
    implementation 'androidx.compose.ui:ui-graphics:1.0.0-rc01'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    api "org.jetbrains.kotlin:kotlin-stdlib:1.6.10"
    api 'androidx.core:core-ktx:1.8.0'
    api("androidx.fragment:fragment-ktx:1.5.0")
    api 'com.google.android.material:material:1.6.1'

    api 'androidx.recyclerview:recyclerview:1.2.1'
    api 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    api 'androidx.lifecycle:lifecycle-livedata-ktx:2.4.1'
    api 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.4.1'
    api 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.9'

    api 'com.squareup.retrofit2:retrofit:2.9.0'
    api 'com.squareup.retrofit2:converter-gson:2.9.0'
    api 'com.squareup.okhttp3:logging-interceptor:4.9.1'

    //图片加载
    api 'com.github.bumptech.glide:glide:4.11.0'
    api 'jp.wasabeef:glide-transformations:4.3.0'
    //gson
    api 'com.google.code.gson:gson:2.8.6'
    //下拉刷新
    api 'io.github.scwang90:refresh-layout-kernel:2.0.5'
    api 'io.github.scwang90:refresh-header-classics:2.0.5'
    //banner图
    api 'com.youth.banner:banner:2.1.0'
    // 状态栏沉浸：https://github.com/gyf-dev/ImmersionBarx
    api 'com.geyifeng.immersionbar:immersionbar:3.2.2'
    api 'com.geyifeng.immersionbar:immersionbar-ktx:3.2.2'
    // 标题栏框架：https://github.com/getActivity/TitleBar
    api 'com.github.getActivity:TitleBar:9.5'
    // adapter
    api 'com.github.CymChad:BaseRecyclerViewAdapterHelper:3.0.4'
    api 'com.google.android:flexbox:2.0.1'

    // 权限请求
    api 'com.github.getActivity:XXPermissions:12.3'

    // eventBus
    api 'org.greenrobot:eventbus:3.2.0'
}

// 打包源码jar
task androidSourcesJar(type: Jar) {
    from android.sourceSets.main.java.getSrcDirs()
    archiveClassifier = 'sources'
}


publishing {
    publications {
        aar(MavenPublication) {
            artifact androidSourcesJar
            afterEvaluate { artifact(tasks.getByName("bundleReleaseAar")) }
            groupId = 'cn.xhd.common.android'
            artifactId = 'base'
            version = '0.0.12'

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.implementation.allDependencies.each {
                    // 避免出现空节点或 artifactId=unspecified 的节点
                    if (it.group != null && (it.name != null && "unspecified" != it.name) && it.version != null) {
                        println "dependency=${it.toString()}"
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                        dependencyNode.appendNode('scope', 'implementation')
                    }
                }
            }
        }
    }

    repositories {
        maven {
            allowInsecureProtocol = true

            def releasesRepoUrl = 'http://nexus.xhd.cn:8081/repository/maven-releases/'
            def snapshotsRepoUrl = 'http://nexus.xhd.cn:8081/repository/maven-snapshots/'
            url = version.toString().endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = 'deployment'
                password = 'deployment@20190730'
            }
        }
    }
}